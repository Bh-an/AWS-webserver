name: Build and deploy

env:
  CODEDEPLOY_APPLICATION_NAME: csye6225-webapp
  CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME: csye6225-webapp-development
  CODEDEPLOY_ARTIFACT_NAME: csye6225-webapp-${{ github.sha }}.zip

on: 
  push:
    branches:
      - main

jobs:
  build:
    name: java buil and publish
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v2
        with:
          java-version: '8.0.322+6'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn clean package spring-boot:repackage -DskipTests
     
      - name: publish jar
        uses: actions/upload-artifact@v2-preview
        with:
          name: "webserver-0.0.1-SNAPSHOT.jar"
          path: target/*.jar
          
  Code_deploy:
    needs: build
    name: Code deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Download artifact 1
        uses: actions/download-artifact@master
        with:
          name: webserver-0.0.1-SNAPSHOT.jar
          path: target/webserver-0.0.1-SNAPSHOT.jar

      - name: Build code-deploy artifact
        run: |
          mkdir code_deploy
          zip ${{ env.CODEDEPLOY_ARTIFACT_NAME }} target/webserver-0.0.1-SNAPSHOT.jar codedeploy/*.sh appspec.yml
          mv ${{ env.CODEDEPLOY_ARTIFACT_NAME }} code_deploy/
          cd code_deploy
          ls -al

      - name: AWS creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: publish to s3
        run: |
          aws s3 sync ./code_deploy s3://${{ secrets.S3_CODEDEPLOY_BUCKET }}

      - name: Code deployment
        run: |
          output=$(aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME }} \
            --description "CSYE6225-CodeDeploy" \
            --s3-location bucket=${{ secrets.S3_CODEDEPLOY_BUCKET }},key=${{ env.CODEDEPLOY_ARTIFACT_NAME }},bundleType=zip \
            --region ${{ secrets.AWS_REGION }} \
            --output json)

            echo $output

          deploymentID=$(echo $output | jq -r '.deploymentId')

          aws deploy wait deployment-successful --deployment-id $deploymentID




# name: Java CI

# on: 
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     name: java compile
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up JDK 1.8
#         uses: actions/setup-java@v2
#         with:
#           java-version: '8.0.322+6'
#           distribution: 'adopt'
#       - name: Build with Maven
#         run: mvn clean package spring-boot:repackage -DskipTests
#       - name: publish jar
#         uses: actions/upload-artifact@v2-preview
#         with:
#           name: "webserver-0.0.1-SNAPSHOT.jar"
#           path: target/*.jar
#       - name: publish properties
#         uses: actions/upload-artifact@v2-preview
#         with:
#           name: "application.properties"
#           path: src/main/resources/application.properties
#       # - name: fetch artifact
#       #   uses: actions/download-artifact@master
#       #   with:
#       #     name: "webserver-0.0.1-SNAPSHOT.jar"
#       #     path: target/webserver-0.0.1-SNAPSHOT.jar
#   packer_build:
#     needs: build
#     name: Packer build
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@master
#       - name: Download artifact 1
#         uses: actions/download-artifact@master
#         with:
#           name: webserver-0.0.1-SNAPSHOT.jar
#           path: packer/webserver-0.0.1-SNAPSHOT.jar
#       - name: Download artifact 2
#         uses: actions/download-artifact@master
#         with:
#           name: application.properties
#           path: packer/application.properties
#       - name: Packer build
#         uses: ExitoLab/packer_build_action_aws@v0.2.10
#         with:
#           templateFile: 'ami.json'
#           workingDir: 'packer'